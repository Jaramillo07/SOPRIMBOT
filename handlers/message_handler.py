"""
Manejador de mensajes para SOPRIM BOT.
Enfoque simplificado para OCR: Env√≠a mensaje gu√≠a, procesa el primer √≠tem detectado
de forma m√°s inteligente por Gemini, y solicita al usuario que env√≠e los dem√°s √≠tems de una lista uno por uno.
"""
import logging
import re
import traceback
import time
import asyncio 

from datetime import datetime, timedelta

from services.gemini_service import GeminiService
from services.whatsapp_service import WhatsAppService
from services.scraping_service import ScrapingService 
from services.ocr_service import OCRService 
from services.sheets_service import SheetsService
from services.firestore_service import obtener_historial, guardar_interaccion
from config.settings import ALLOWED_TEST_NUMBERS 

logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class MessageHandler:
    
    def __init__(self):
        logger.info("üöÄ Inicializando MessageHandler v3.7 (OCR con Extracci√≥n Dirigida por Gemini)")
        self.gemini_service = GeminiService()
        self.whatsapp_service = WhatsAppService()
        self.scraping_service = ScrapingService() 
        self.ocr_service = OCRService() 
        self.sheets_service = SheetsService()
        
        self.MAX_PRODUCTOS_POR_USUARIO_EN_LISTA = 5 
        self.TIMEOUT_POR_PRODUCTO = 120 
        self.THROTTLE_DELAY_SCRAPING = 3 
        
        self.ultimo_scraping_usuario = {}
        self.circuit_breaker_config = {
            "fails": 0, 
            "last_fail_time": None, 
            "is_open": False, 
            "open_duration_seconds": 300,
            "max_fails": 3
        }
        self.mensaje_espera_enviado = {}
        logger.info("‚úÖ MessageHandler v3.7 (OCR con Extracci√≥n Dirigida por Gemini) inicializado.")

    def _check_circuit_breaker(self):
        cb = self.circuit_breaker_config
        if cb["is_open"]:
            if cb["last_fail_time"] and (datetime.now() - cb["last_fail_time"]).seconds > cb["open_duration_seconds"]:
                cb["is_open"] = False
                cb["fails"] = 0
                logger.info("üü¢ Circuit breaker CERRADO autom√°ticamente despu√©s del periodo de enfriamiento.")
                return False
            logger.warning(" CIRCUIT breaker ABIERTO. Rechazando temporalmente la solicitud.")
            return True
        return False

    def _update_circuit_breaker(self, success=True):
        cb = self.circuit_breaker_config
        if success:
            if cb["fails"] > 0:
                 cb["fails"] = max(0, cb["fails"] - 1)
            if cb["fails"] == 0:
                 logger.debug(f"Operaci√≥n exitosa, fallos reseteados o mantenidos en 0.")
            else:
                 logger.debug(f"Operaci√≥n exitosa, fallos actuales: {cb['fails']}")
        else:
            cb["fails"] += 1
            cb["last_fail_time"] = datetime.now()
            logger.warning(f"Operaci√≥n fallida. Fallos acumulados: {cb['fails']}.")
            if cb["fails"] >= cb["max_fails"] and not cb["is_open"]:
                cb["is_open"] = True
                logger.error(f"üî¥ Circuit breaker ABIERTO debido a {cb['max_fails']} fallos consecutivos.")
    
    def _can_process_scraping_throttled(self, phone_number_key_clean: str) -> bool:
        now = datetime.now()
        if phone_number_key_clean in self.ultimo_scraping_usuario:
            time_diff_seconds = (now - self.ultimo_scraping_usuario[phone_number_key_clean]).total_seconds()
            if time_diff_seconds < self.THROTTLE_DELAY_SCRAPING:
                logger.info(f"‚è±Ô∏è Throttling de scraping activo para {phone_number_key_clean}. Esperando {self.THROTTLE_DELAY_SCRAPING - time_diff_seconds:.1f}s")
                return False
        self.ultimo_scraping_usuario[phone_number_key_clean] = now
        return True

    def _generar_mensaje_instrucciones_multiples(self, productos_detectados_lista: list, mensaje_original_usuario: str) -> str:
        num_productos = len(productos_detectados_lista)
        mensaje = f"Detect√© que mencionaste varios productos en tu mensaje de texto: '{mensaje_original_usuario}'.\n"
        mensaje += "\nPara darte la informaci√≥n m√°s precisa, ¬øpodr√≠as decirme cu√°l de estos te gustar√≠a que consulte primero?\n"
        for i, prod in enumerate(productos_detectados_lista[:3]): 
            mensaje += f" - {prod.strip().capitalize()}\n"
        if num_productos > 3:
            mensaje += f"... y otros m√°s.\n"
        mensaje += "\nEscribe solo el nombre del que quieres ahora, por favor."
        return mensaje

    def _detectar_productos_locales_simples(self, mensaje_texto: str) -> list:
        if not mensaje_texto or len(mensaje_texto) < 3: return []
        mensaje_lower = mensaje_texto.lower()
        productos_clave = [
            "paracetamol", "ibuprofeno", "aspirina", "dualgos", "losartan", "metformina", "tramadol",
            "amoxicilina", "omeprazol", "diclofenaco", "sildenafil", "tadalafil", "clonazepam",
        ]
        detectados = []
        for p_clave in productos_clave:
            if re.search(r'\b' + re.escape(p_clave) + r'\b', mensaje_lower):
                detectados.append(p_clave)
        if detectados: logger.info(f"[Fallback Local] Detecci√≥n simple encontr√≥: {detectados}")
        return list(set(detectados))

    async def _enviar_mensaje_espera_si_necesario(self, phone_number: str, phone_number_key_clean: str):
        ahora = datetime.now()
        if self.mensaje_espera_enviado.get(phone_number_key_clean) is None or \
           (ahora - self.mensaje_espera_enviado[phone_number_key_clean]).total_seconds() > 60:
            mensaje_espera = "Estoy buscando la informaci√≥n de tu producto, esto puede tomar un momento... ‚è≥ Gracias por tu paciencia."
            self.whatsapp_service.send_text_message(phone_number, mensaje_espera)
            self.mensaje_espera_enviado[phone_number_key_clean] = ahora

    async def _procesar_producto_individual_con_logica_interna(
        self, 
        producto_nombre: str, 
        raw_phone_number_with_prefix: str,
        historial_chat: list, 
        mensaje_usuario_original_completo: str, # Mensaje que dispar√≥ esta b√∫squeda espec√≠fica
        cantidad_solicitada_info: int = None
    ):
        phone_number_key_clean = raw_phone_number_with_prefix.replace("whatsapp:", "")
        logger.info(f"==> Iniciando procesamiento individual para: '{producto_nombre}' (Usuario: {phone_number_key_clean}, Cantidad: {cantidad_solicitada_info})")
        
        if not producto_nombre or not producto_nombre.strip():
            logger.warning("Intento de procesar un nombre de producto vac√≠o o nulo. Abortando b√∫squeda individual.")
            # No enviar mensaje al usuario aqu√≠, la l√≥gica principal deber√≠a manejarlo si no hay producto.
            return {"success": False, "respuesta": "No se especific√≥ un producto v√°lido para buscar.", "producto_procesado": None}

        current_scraper = self.scraping_service 
        info_producto_final_para_gemini = None
        
        await self._enviar_mensaje_espera_si_necesario(raw_phone_number_with_prefix, phone_number_key_clean)

        try:
            info_producto_sheets = self.sheets_service.buscar_producto(producto_nombre, threshold=0.70)
            if info_producto_sheets:
                logger.info(f"Producto '{producto_nombre}' encontrado en Base Interna (Sheets).")
                info_producto_final_para_gemini = {
                    "opcion_mejor_precio": info_producto_sheets,
                    "opcion_entrega_inmediata": info_producto_sheets if info_producto_sheets.get("fuente") == "Base Interna" else None,
                    "tiene_doble_opcion": False
                }
            else:
                logger.info(f"Producto '{producto_nombre}' NO en Base Interna. Intentando scraping...")
                if self._can_process_scraping_throttled(phone_number_key_clean):
                    info_producto_scraped = current_scraper.buscar_producto(producto_nombre)
                    if info_producto_scraped and (info_producto_scraped.get("opcion_mejor_precio") or info_producto_scraped.get("opcion_entrega_inmediata")):
                        logger.info(f"Producto '{producto_nombre}' encontrado v√≠a scraping.")
                        info_producto_final_para_gemini = info_producto_scraped
                        if hasattr(current_scraper, '_full_cleanup_after_phase1'):
                            logger.info(f"Ejecutando limpieza despu√©s de scraping exitoso para '{producto_nombre}'.")
                            current_scraper._full_cleanup_after_phase1()
                    else:
                        logger.info(f"Producto '{producto_nombre}' NO encontrado v√≠a scraping.")
                else:
                    logger.info(f"Scraping throttled para '{producto_nombre}'.")
            
            if info_producto_final_para_gemini:
                es_consulta_de_cantidad = isinstance(cantidad_solicitada_info, int) and cantidad_solicitada_info > 0
                respuesta_producto_gemini = self.gemini_service.generate_product_response(
                    user_message=mensaje_usuario_original_completo, # El mensaje que inici√≥ esta b√∫squeda espec√≠fica
                    producto_info=info_producto_final_para_gemini,
                    additional_context=producto_nombre, 
                    conversation_history=historial_chat,
                    es_consulta_cantidad=es_consulta_de_cantidad,
                    cantidad_solicitada=cantidad_solicitada_info if es_consulta_de_cantidad else None
                )
                self.whatsapp_service.send_product_response(raw_phone_number_with_prefix, respuesta_producto_gemini, info_producto_final_para_gemini)
                final_user_response = respuesta_producto_gemini
            else:
                final_user_response = (f"Lo siento, no pude encontrar informaci√≥n para el producto '{producto_nombre}'. "
                                      "¬øPodr√≠as verificar el nombre o darme m√°s detalles? Tambi√©n puedes preguntar por alternativas.")
                self.whatsapp_service.send_text_message(raw_phone_number_with_prefix, final_user_response)
            
            # Guardar la interacci√≥n usando el mensaje original que llev√≥ a esta b√∫squeda de producto
            guardar_interaccion(phone_number_key_clean, mensaje_usuario_original_completo, final_user_response)
            self._update_circuit_breaker(success=True)
            return {"success": True, "respuesta": final_user_response, "producto_procesado": producto_nombre}

        except Exception as e:
            logger.error(f"Error severo en _procesar_producto_individual para '{producto_nombre}': {e}\n{traceback.format_exc()}")
            self._update_circuit_breaker(success=False)
            error_msg_usuario = f"Lo siento, hubo un problema t√©cnico al obtener informaci√≥n para '{producto_nombre}'. Por favor, intenta de nuevo m√°s tarde."
            self.whatsapp_service.send_text_message(raw_phone_number_with_prefix, error_msg_usuario)
            # Guardar la interacci√≥n de error
            guardar_interaccion(phone_number_key_clean, mensaje_usuario_original_completo, error_msg_usuario)
            return {"success": False, "error": str(e), "producto_procesado": producto_nombre, "respuesta": error_msg_usuario}

    async def _procesar_producto_con_timeout(self, producto_nombre: str, raw_phone_number_with_prefix: str, historial: list, mensaje_original: str, cantidad_info_para_procesar: int = None):
        try:
            logger.info(f"‚è≥ Iniciando _procesar_producto_con_timeout para: '{producto_nombre}', Cantidad: {cantidad_info_para_procesar}")
            if not producto_nombre or not producto_nombre.strip(): # Chequeo adicional
                logger.error("Timeout: Nombre de producto vac√≠o o nulo recibido.")
                return {"success": False, "error": "producto_vacio", "producto_procesado": None, "respuesta": "No se especific√≥ un producto para buscar."}

            resultado = await asyncio.wait_for(
                self._procesar_producto_individual_con_logica_interna(
                    producto_nombre, 
                    raw_phone_number_with_prefix,
                    historial, 
                    mensaje_original,
                    cantidad_solicitada_info=cantidad_info_para_procesar
                ),
                timeout=self.TIMEOUT_POR_PRODUCTO
            )
            return resultado
        except asyncio.TimeoutError:
            logger.error(f"‚è∞ TIMEOUT procesando producto: '{producto_nombre}' despu√©s de {self.TIMEOUT_POR_PRODUCTO}s.")
            self._update_circuit_breaker(success=False)
            timeout_msg_usuario = f"Lo siento, la b√∫squeda para '{producto_nombre}' tom√≥ m√°s tiempo del esperado. Por favor, intenta de nuevo en un momento."
            self.whatsapp_service.send_text_message(raw_phone_number_with_prefix, timeout_msg_usuario)
            guardar_interaccion(raw_phone_number_with_prefix.replace("whatsapp:", ""), mensaje_original, timeout_msg_usuario)
            return {"success": False, "error": "timeout", "producto_procesado": producto_nombre, "respuesta": timeout_msg_usuario}
        except Exception as e:
            logger.error(f"‚ùå Error inesperado en _procesar_producto_con_timeout para '{producto_nombre}': {e}\n{traceback.format_exc()}")
            self._update_circuit_breaker(success=False)
            error_msg_usuario = f"Lo siento, ocurri√≥ un error inesperado al procesar tu solicitud para '{producto_nombre}'. Intenta de nuevo m√°s tarde."
            self.whatsapp_service.send_text_message(raw_phone_number_with_prefix, error_msg_usuario)
            guardar_interaccion(raw_phone_number_with_prefix.replace("whatsapp:", ""), mensaje_original, error_msg_usuario)
            return {"success": False, "error": str(e), "producto_procesado": producto_nombre, "respuesta": error_msg_usuario}


    async def procesar_mensaje(self, mensaje: str, phone_number: str, media_urls: list = None):
        start_time = time.time()
        processing_time_taken = lambda: f"{time.time() - start_time:.2f}s"
        logger.info(f"üì± [MH v3.7 OCR Dirigido] Procesando de {phone_number}: '{mensaje[:100]}{'...' if len(mensaje)>100 else ''}' | Media: {'S√≠' if media_urls else 'No'}")

        if self._check_circuit_breaker():
            respuesta_cb = "üîß Nuestro sistema est√° experimentando una alta carga. Por favor, int√©ntalo de nuevo en unos minutos."
            self.whatsapp_service.send_text_message(phone_number, respuesta_cb)
            return {"success": False, "message_type": "circuit_breaker_open", "respuesta": respuesta_cb, "processing_time": processing_time_taken()}

        clean_phone_for_db = phone_number.replace("whatsapp:", "")
        mensaje_original_usuario_texto = mensaje 
        mensaje_para_analisis_gemini = mensaje_original_usuario_texto # Mensaje que se usar√° para el an√°lisis de Gemini
        
        fue_ocr = False 

        if media_urls:
            fue_ocr = True
            try:
                texto_extraido_ocr = await self.ocr_service.process_images(media_urls)

                if texto_extraido_ocr and not texto_extraido_ocr.lower().startswith("no se pudo") and texto_extraido_ocr.strip():
                    logger.info(f"üìù Texto de imagen: {texto_extraido_ocr[:100]}...")
                    mensaje_para_analisis_gemini = f"{mensaje_original_usuario_texto}\n\n[Texto de imagen]: {texto_extraido_ocr}".strip() if mensaje_original_usuario_texto else f"[Texto de imagen]: {texto_extraido_ocr}"
                    
                    mensaje_guia_ocr = (
                        "¬°Hola! Soy tu asistente de INSUMOS JIP. üëç\n"
                        "He recibido tu imagen. Si es la foto de un producto en su caja, intentar√© buscarlo. "
                        "Si es una imagen con una lista de varios productos, buscar√© el primero que pueda identificar claramente. "
                        "Para los dem√°s productos de la lista, por favor, env√≠amelos uno por uno despu√©s para que pueda ayudarte mejor. üòä"
                    )
                    self.whatsapp_service.send_text_message(phone_number, mensaje_guia_ocr)
                    # Guardar el mensaje original del usuario (que pudo ser solo la imagen o texto + imagen)
                    # y la respuesta gu√≠a del bot.
                    guardar_interaccion(clean_phone_for_db, 
                                       mensaje_original_usuario_texto if mensaje_original_usuario_texto else "(Imagen enviada)", 
                                       mensaje_guia_ocr)
                    await asyncio.sleep(1.5) 

                elif not mensaje_original_usuario_texto: 
                    respuesta_ocr_fail = "Recib√≠ tu imagen, pero no pude leer el texto. ¬øPodr√≠as escribir tu consulta?"
                    self.whatsapp_service.send_text_message(phone_number, respuesta_ocr_fail)
                    guardar_interaccion(clean_phone_for_db, "(Imagen sin texto legible)", respuesta_ocr_fail)
                    return {"success": True, "message_type": "ocr_failed_no_text", "respuesta": respuesta_ocr_fail, "processing_time": processing_time_taken()}
            
            except Exception as e:
                logger.error(f"‚ùå Error en procesamiento de OCR: {e}\n{traceback.format_exc()}")
                if not mensaje_original_usuario_texto:
                    respuesta_ocr_error = "Lo siento, hubo un problema t√©cnico al procesar tu imagen. ¬øPodr√≠as enviar tu consulta en texto?"
                    self.whatsapp_service.send_text_message(phone_number, respuesta_ocr_error)
                    return {"success": False, "message_type": "error_ocr", "error": str(e), "respuesta": respuesta_ocr_error, "processing_time": processing_time_taken()}

        if not mensaje_para_analisis_gemini or not mensaje_para_analisis_gemini.strip(): 
            logger.info("üìù Mensaje para Gemini vac√≠o despu√©s de OCR. Enviando saludo.")
            respuesta_vacia = self.gemini_service.generate_response("Hola", []) #
            self.whatsapp_service.send_text_message(phone_number, respuesta_vacia)
            guardar_interaccion(clean_phone_for_db, mensaje_original_usuario_texto if mensaje_original_usuario_texto else "(Mensaje vac√≠o)", respuesta_vacia)
            return {"success": True, "message_type": "mensaje_vacio_saludo", "respuesta": respuesta_vacia, "processing_time": processing_time_taken()}

        historial = obtener_historial(clean_phone_for_db)
        # El mensaje_para_analisis_gemini ya incluye el [Texto de imagen]: ... si hubo OCR
        contexto_gemini = self.gemini_service.analizar_contexto_con_gemini(mensaje_para_analisis_gemini, historial, is_ocr_text=fue_ocr) # Pasar flag
        
        tipo_consulta = contexto_gemini.get("tipo_consulta", "no_entiendo_o_irrelevante")
        productos_mencionados_directo_usuario = contexto_gemini.get("productos_mencionados_ahora", [])
        producto_principal_identificado_ocr = contexto_gemini.get("producto_principal_ocr")
        producto_contexto_anterior = contexto_gemini.get("producto_contexto_anterior")
        cantidad_solicitada_gemini = contexto_gemini.get("cantidad_solicitada")
        
        logger.info(f"üß† An√°lisis Gemini: Tipo='{tipo_consulta}', ProdUsuario='{productos_mencionados_directo_usuario}', ProdOCR='{producto_principal_identificado_ocr}', ProdAntes='{producto_contexto_anterior}', Cant='{cantidad_solicitada_gemini}'")

        if tipo_consulta in ["solicitud_direccion_contacto", "confirmacion_pedido"]:
            respuesta_info = self.gemini_service.generate_response(mensaje_para_analisis_gemini, historial)
            self.whatsapp_service.send_text_message(phone_number, respuesta_info)
            guardar_interaccion(clean_phone_for_db, mensaje_para_analisis_gemini, respuesta_info)
            self._update_circuit_breaker(success=True)
            return {"success": True, "message_type": f"info_directa_{tipo_consulta}", "respuesta": respuesta_info, "processing_time": processing_time_taken()}

        if tipo_consulta == "consulta_cantidad" and isinstance(cantidad_solicitada_gemini, int) and cantidad_solicitada_gemini > 0:
            producto_objetivo_cantidad = producto_principal_identificado_ocr or \
                                         (productos_mencionados_directo_usuario[0] if productos_mencionados_directo_usuario else None) or \
                                         producto_contexto_anterior
            if producto_objetivo_cantidad:
                logger.info(f"‚ú® Intenci√≥n: Consulta de cantidad ({cantidad_solicitada_gemini}) para '{producto_objetivo_cantidad}'.")
                resultado_cantidad = await self._procesar_producto_con_timeout(
                    producto_objetivo_cantidad, phone_number, historial, mensaje_para_analisis_gemini, cantidad_info_para_procesar=cantidad_solicitada_gemini
                )
                return {**resultado_cantidad, "message_type": f"cantidad_procesada_{'ok' if resultado_cantidad.get('success') else 'error'}", "processing_time": processing_time_taken()}
            else:
                logger.warning("Consulta de cantidad detectada por Gemini pero sin producto claro asociado.")
        
        # Determinar el producto principal a procesar
        producto_identificado_final = None
        if fue_ocr and producto_principal_identificado_ocr:
            producto_identificado_final = producto_principal_identificado_ocr
            logger.info(f"OCR: Se procesar√° el producto principal del OCR: '{producto_identificado_final}'")
        elif productos_mencionados_directo_usuario: # Si no hubo OCR o Gemini no sac√≥ nada del OCR, pero s√≠ del texto del usuario
            if len(productos_mencionados_directo_usuario) > 1:
                 logger.info(f"üéØ M√∫ltiples productos en TEXTO ({len(productos_mencionados_directo_usuario)}): {productos_mencionados_directo_usuario}. Solicitando uno por uno.")
                 mensaje_instr = self._generar_mensaje_instrucciones_multiples(productos_mencionados_directo_usuario, mensaje_original_usuario_texto)
                 self.whatsapp_service.send_text_message(phone_number, mensaje_instr)
                 guardar_interaccion(clean_phone_for_db, mensaje_para_analisis_gemini, mensaje_instr)
                 self._update_circuit_breaker(success=True)
                 return {"success": True, "message_type": "instrucciones_multiples_productos_texto", "respuesta": mensaje_instr, "processing_time": processing_time_taken()}
            else: # Un solo producto del texto del usuario
                producto_identificado_final = productos_mencionados_directo_usuario[0]
        elif tipo_consulta == "pregunta_sobre_producto_en_contexto" and producto_contexto_anterior: # No hubo OCR ni productos en mensaje actual, pero s√≠ en contexto
            producto_identificado_final = producto_contexto_anterior
        
        # Fallback a detecci√≥n local si Gemini no identific√≥ nada concluyente y no es OCR que ya se manej√≥
        if not producto_identificado_final and not fue_ocr and tipo_consulta in ["otro", "no_entiendo_o_irrelevante", "respuesta_a_pregunta_bot", "pregunta_general_farmacia"]:
            productos_locales = self._detectar_productos_locales_simples(mensaje_para_analisis_gemini)
            if productos_locales:
                producto_identificado_final = productos_locales[0] 
                logger.info(f"Fallback local: Se procesar√° '{producto_identificado_final}'")


        if producto_identificado_final:
            logger.info(f"üîç Procesando producto √∫nico validado: '{producto_identificado_final}'")
            resultado_unico = await self._procesar_producto_con_timeout(
                producto_identificado_final, phone_number, historial, mensaje_para_analisis_gemini, cantidad_info_para_procesar=None
            )
            return {**resultado_unico, "message_type": f"producto_unico_{'ok' if resultado_unico.get('success') else 'error'}", "processing_time": processing_time_taken()}
        
        # Si despu√©s de todo no hay producto a procesar (ni de OCR, ni de texto, ni de contexto, ni de fallback)
        # O si fue OCR pero Gemini no pudo extraer un "producto_principal_ocr"
        if fue_ocr and not producto_principal_identificado_ocr:
            logger.info("üí¨ OCR procesado, pero Gemini no identific√≥ un producto principal claro de la imagen. Usuario ya fue guiado.")
            # El mensaje gu√≠a ya se envi√≥. No necesitamos enviar otro de "no entend√≠" a menos que queramos.
            # Podr√≠amos simplemente esperar la siguiente interacci√≥n del usuario.
            # Por consistencia, guardaremos una interacci√≥n indicando que no se proces√≥ un producto.
            guardar_interaccion(clean_phone_for_db, mensaje_para_analisis_gemini, "(Imagen procesada, no se identific√≥ producto para b√∫squeda autom√°tica)")
            return {"success": True, "message_type": "ocr_sin_producto_principal_identificado", "respuesta": "(Imagen procesada, no se identific√≥ producto para b√∫squeda autom√°tica)", "processing_time": processing_time_taken()}

        logger.info(f"üí¨ No se identific√≥ un producto espec√≠fico para buscar. Tipo consulta: '{tipo_consulta}'. Generando respuesta general.")
        respuesta_final_gemini = self.gemini_service.generate_response(mensaje_para_analisis_gemini, historial)
        self.whatsapp_service.send_text_message(phone_number, respuesta_final_gemini)
        guardar_interaccion(clean_phone_for_db, mensaje_para_analisis_gemini, respuesta_final_gemini)
        self._update_circuit_breaker(success=True)
        return {"success": True, "message_type": f"respuesta_gemini_{tipo_consulta}", "respuesta": respuesta_final_gemini, "processing_time": processing_time_taken()}
